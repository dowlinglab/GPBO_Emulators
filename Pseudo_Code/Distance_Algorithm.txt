#Initialize max distance
max_distance = 0

#Only use this algorithm when >1 points have the max ei
if len(argmax[0]) > 1:
    #Create avg x y pt for training data
    train_T12_avg = np.array([np.average(train_theta[:,0]), np.average(train_theta[:,1])])
    assert len(argmax[0]) == len(argmax[1]), "Ensure argmax arrays are the same length"
    #Check each point in argmax with all training points and find max distance
    #Loop over Theta1 coord points
    for i in range(len(argmax[0])):
        #Create the corresponding argmax point that maps to theta 1 and theta 2 values
        point = np.array([[argmax[0,i]],[argmax[1,i]]])

        #Find theta value corresponding to argmax(EI)
        Theta_1 = float(theta1_mesh[point[0],point[1]])
        Theta_2 = float(theta2_mesh[point[0],point[1]])
        Theta_Arr = np.array((Theta_1,Theta_2))

        #Calculate Distance
        distance_sq = (train_T12_avg[0] - Theta_Arr[0])**2 + (train_T12_avg[1] - Theta_Arr[1])**2

        #Set distance to max distance if it is applicable. At the end of the loop, argmax will be the point with the greatest distance.
        if distance_sq > max_distance:
            max_distance = distance
            argmax = point
            
            
            
            
            
            ##OLD VERSION
            #Loop over training data
            for i in range(len(train_data)):
                distance += (train_data[i,0] - Theta_Arr[0])**2 + (train_data[i,1] - Theta_Arr[1])**2
                #Check for greatest distance
                if distance > max_distance:
                    max_distance = distance
                    argmax = point